name: Daily Movie Data Update

on:
  schedule:
    # 每天台灣時間上午 4:30 執行 (UTC+8)，對應 UTC 時間 20:30
    - cron: '30 20 * * *'
  # 允許手動觸發工作流程
  workflow_dispatch:

jobs:
  update-movie-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          cd backend/scripts/scrapers
          pip install requests beautifulsoup4 pandas lxml aiohttp asyncio psycopg2-binary

      - name: Create necessary directories
        run: |
          mkdir -p backend/output/scrapers
          mkdir -p backend/output/cache

      # 設置時區為台灣時間 (UTC+8)
      - name: Set timezone
        run: |
          sudo timedatectl set-timezone Asia/Taipei
          echo "當前時間: $(date)"

      # 設置 Node.js 環境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 執行 ATMovies 電影爬蟲
      - name: Run ATMovies movie scraper
        run: |
          echo "當前目錄: $(pwd)"
          cd backend/scripts/scrapers
          python atmovies_movie_scraper_v2.py
          ls -la  # 顯示當前目錄內容
          cd ../../..  # 返回工作區根目錄

      # 設置環境變數
      - name: Set up environment
        id: env
        run: |
          # 查找最新的電影JSON文件
          echo "正在查找最新的電影JSON文件..."
          LATEST_JSON=$(find backend/output/scrapers -name "atmovies_movies_*.json" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" " || true)
          
          if [ -n "$LATEST_JSON" ] && [ -f "$LATEST_JSON" ]; then
            echo "找到電影文件: $LATEST_JSON"
            echo "LATEST_JSON=$LATEST_JSON" >> $GITHUB_ENV
          else
            echo "未找到有效的電影文件"
            find backend/output/scrapers -name "*.json" -type f -ls || echo "找不到任何 JSON 文件"
            exit 1
          fi

      # 安裝 Node.js 依賴
      - name: Install Node.js dependencies
        if: steps.env.outcome == 'success'
        run: |
          echo "正在安裝 Node.js 依賴..."
          cd backend
          npm install pg commander dotenv

      # 執行資料庫匯入
      - name: Import movie data to database
        if: steps.env.outcome == 'success'
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://time2cinema_db_user:wUsukaH2Kiy8fIejuOqsk5yjn4FBb0RX@dpg-d0e9e749c44c73co4lsg-a.singapore-postgres.render.com/time2cinema_db' }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -e  # 如果任何命令失敗，則退出
          
          echo "當前工作目錄: $(pwd)"
          echo "工作區內容:"
          ls -la
          
          echo "使用電影文件進行匯入: ${{ env.LATEST_JSON }}"
          
          # 確保 backend 目錄存在
          if [ ! -d "backend" ]; then
            echo "錯誤：找不到 backend 目錄"
            ls -la
            exit 1
          fi
          
          cd backend
          
          # 執行 JSON 匯入腳本
          echo "正在執行 JSON 匯入腳本..."
          node scripts/importers/import_movies_from_json.js -f "../${{ env.LATEST_JSON }}"
          
          if [ $? -eq 0 ]; then
            echo "電影資料已成功匯入資料庫"
          else
            echo "錯誤：電影資料匯入失敗"
            exit 1
          fi
          
      # 記錄執行結果
      - name: Create log file
        if: always()  # 即使之前的步驟失敗也執行
        run: |
          echo "Movie data update completed at $(date)" > movie_update_log.txt
          echo "Movie files:" >> movie_update_log.txt
          find backend/scripts/scrapers -name "atmovies_movies_*.csv" -type f -printf "%T@ %p\n" | sort -n >> movie_update_log.txt 2>/dev/null || echo "No movie files found" >> movie_update_log.txt
          
          # 上傳日誌文件作為構建產物
          echo "Uploading log file..."
          mkdir -p logs
          cp movie_update_log.txt logs/
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
      
      # 上傳日誌文件作為構建產物
      - name: Upload log file
        if: always()  # 即使之前的步驟失敗也執行
        uses: actions/upload-artifact@v4
        with:
          name: movie-update-logs
          path: logs/
          retention-days: 7
          
      # 提交更新的資料文件
      - name: Commit and push updated data files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git fetch
          git checkout main
          git add backend/scripts/scrapers/atmovies_movies_*.csv movie_update_log.txt || true
          git diff --quiet && git diff --staged --quiet || git commit -m "Auto update movie data $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin main
        continue-on-error: true
