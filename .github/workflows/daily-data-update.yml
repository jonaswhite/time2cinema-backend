name: Daily Data Update

on:
  schedule:
    # 每天台灣時間凌晨 3 點運行 (UTC+8)，對應 UTC 時間 19:00
    - cron: '0 19 * * *'
  # 允許手動觸發工作流程
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Puppeteer dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgbm-dev libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release xdg-utils wget

      - name: Install Node.js dependencies
        run: |
          cd backend
          npm install
          npx puppeteer browsers install chrome

      - name: Install Python dependencies
        run: |
          cd backend/scripts/scrapers
          pip install -r requirements.txt || echo "No requirements.txt found, installing common packages"
          pip install requests beautifulsoup4 pandas lxml aiohttp asyncio

      - name: Create necessary directories
        run: |
          mkdir -p backend/output/scrapers
          mkdir -p backend/output/importers
          mkdir -p backend/output/utils
          mkdir -p backend/output/cache

      # 設置時區為台灣時間 (UTC+8)
      - name: Set timezone
        run: |
          sudo timedatectl set-timezone Asia/Taipei
          echo "當前時間: $(date)"

      # 執行 ATMovies 爬蟲 (使用增強版)
      - name: Run ATMovies scraper
        run: |
          cd backend
          # 設置環境變數，讓爬蟲腳本知道它在 GitHub Actions 環境中運行
          export GITHUB_ACTIONS=true
          # 增加調試輸出
          echo "開始執行增強版 ATMovies 爬蟲..."
          echo "當前時間: $(date)"
          python -u scripts/scrapers/atmovies_scraper_enhanced.py
          echo "ATMovies 爬蟲執行完成，時間: $(date)"
          # 檢查輸出文件
          ls -la output/scrapers/
          if [ -f output/scrapers/atmovies_showtimes.json ]; then
            echo "場次數據文件已生成"
            # 顯示文件大小
            du -h output/scrapers/atmovies_showtimes.json
            # 檢查文件內容是否為空
            if [ "$(cat output/scrapers/atmovies_showtimes.json | wc -c)" -gt 100 ]; then
              echo "場次數據文件內容有效"
              # 顯示抓取的日期範圍
              echo "場次日期範圍預覽:"
              cat output/scrapers/atmovies_showtimes.json | grep -o '"display_date":"[^"]*"' | sort | uniq
              # 顯示總場次數
              echo "總場次數:"
              cat output/scrapers/atmovies_showtimes.json | grep -o '"time":' | wc -l
            else
              echo "警告：場次數據文件內容可能無效"
            fi
          else
            echo "警告：場次數據文件未生成"
          fi
        continue-on-error: true

      # 執行票房爬蟲
      - name: Run boxoffice scraper
        run: |
          cd backend
          echo "開始執行票房爬蟲..."
          # 確保 cache 目錄存在
          mkdir -p cache
          # 使用 --no-sandbox 參數來解決 GitHub Actions 中的 Chrome 問題
          PUPPETEER_ARGS="--no-sandbox --disable-setuid-sandbox" node scripts/scrapers/boxoffice_scraper.js "./cache" 20 5000
          echo "票房爬蟲執行完成"
          # 檢查輸出文件
          ls -la cache/
          # 尋找最新的票房文件
          LATEST_FILE=$(find cache -name "boxoffice-*.json" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
          if [ -n "$LATEST_FILE" ]; then
            echo "找到最新票房文件: $LATEST_FILE"
            # 顯示文件大小
            du -h "$LATEST_FILE"
            # 檢查文件內容是否為空
            if [ "$(cat "$LATEST_FILE" | wc -c)" -gt 100 ]; then
              echo "票房數據文件內容有效"
            else
              echo "警告：票房數據文件內容可能無效"
            fi
          else
            echo "警告：未找到票房數據文件"
          fi
        continue-on-error: true

      # 匯入票房資料到線上資料庫
      - name: Import boxoffice data to online database
        run: |
          cd backend
          echo "開始將票房資料 匯入 線上資料庫..."
          # 尋找最新票房文件
          LATEST_FILE=$(find cache -name "boxoffice-*.json" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
          if [ -n "$LATEST_FILE" ]; then
            echo "使用最新票房文件進行 匯入: $LATEST_FILE"
            # 顯示文件內容的前幾行，以確認格式正確
            echo "文件內容預覽:"
            head -n 20 "$LATEST_FILE" | grep -v "password"
            # 使用指定的文件進行 匯入
            node scripts/importers/import_boxoffice_remote.js "$LATEST_FILE"
          else
            echo "未找到票房文件，嘗試使用預設方式 匯入..."
            node scripts/importers/import_boxoffice_remote.js
          fi
          echo "票房資料 匯入 完成"
        env:
          DATABASE_URL: postgresql://time2cinema_db_user:wUsukaH2Kiy8fIejuOqsk5yjn4FBb0RX@dpg-d0e9e749c44c73co4lsg-a.singapore-postgres.render.com/time2cinema_db
        continue-on-error: true

      # 匯入場次資料到線上資料庫
      - name: Import showtimes data to online database
        run: |
          cd backend
          node scripts/importers/import_showtimes.js
        env:
          DATABASE_URL: postgresql://time2cinema_db_user:wUsukaH2Kiy8fIejuOqsk5yjn4FBb0RX@dpg-d0e9e749c44c73co4lsg-a.singapore-postgres.render.com/time2cinema_db
        continue-on-error: true

      # 記錄執行結果
      - name: Create log file
        run: |
          echo "Data update completed at $(date)" > update_log.txt
          echo "Boxoffice files:" >> update_log.txt
          ls -la backend/cache/boxoffice-* >> update_log.txt || echo "No boxoffice files found" >> update_log.txt
          echo "Showtimes files:" >> update_log.txt
          ls -la backend/output/scrapers/atmovies_showtimes.json >> update_log.txt || echo "No showtimes file found" >> update_log.txt

      # 提交更新的資料文件（可選）
      - name: Commit and push updated data files
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add backend/cache/boxoffice-*.json backend/output/scrapers/atmovies_showtimes.json update_log.txt || true
          git commit -m "Auto update data $(date)" || echo "No changes to commit"
          git push
        continue-on-error: true
