name: Daily Boxoffice Update

on:
  schedule:
    # 每天台灣時間下午 4 點運行 (UTC+8)，對應 UTC 時間 08:00
    - cron: '0 8 * * *'
  # 允許手動觸發工作流程
  workflow_dispatch:

jobs:
  update-boxoffice:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Puppeteer dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgbm-dev libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release xdg-utils wget

      - name: Install Node.js dependencies
        run: |
          cd backend
          npm install
          npx puppeteer browsers install chrome

      - name: Create necessary directories
        run: |
          mkdir -p backend/output/scrapers
          mkdir -p backend/cache

      # 設置時區為台灣時間 (UTC+8)
      - name: Set timezone
        run: |
          sudo timedatectl set-timezone Asia/Taipei
          echo "當前時間: $(date)"

      # 執行票房爬蟲
      - name: Run boxoffice scraper
        run: |
          cd backend
          echo "開始執行票房爬蟲..."
          # 確保 cache 目錄存在
          mkdir -p cache
          # 使用 --no-sandbox 參數來解決 GitHub Actions 中的 Chrome 問題
          PUPPETEER_ARGS="--no-sandbox --disable-setuid-sandbox" node scripts/scrapers/boxoffice_scraper.js "./cache" 20 5000
          echo "票房爬蟲執行完成"
          
          # 檢查輸出文件
          if [ -f output/scrapers/boxoffice_data.json ]; then
            echo "票房數據文件已生成"
            # 顯示文件大小
            du -h output/scrapers/boxoffice_data.json
            # 顯示數據預覽
            echo "票房數據預覽:"
            head -n 20 output/scrapers/boxoffice_data.json
            
            # 將輸出文件移動到 cache 目錄，供後續步驟使用
            cp output/scrapers/boxoffice_data.json cache/boxoffice-$(date +%Y-%m-%d).json
            echo "已複製票房數據到 cache 目錄"
          else
            echo "錯誤：票房數據文件未生成"
            exit 1
          fi
        continue-on-error: false
        
      # 安裝 Node.js 依賴
      - name: Install Node.js dependencies
        run: |
          cd backend
          npm install pg commander
          
      # 執行票房數據導入
      - name: Import boxoffice data to remote database
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          echo "開始導入票房數據到遠端資料庫..."
          # 使用 --remote 參數指定使用遠端資料庫
          node scripts/importers/import_boxoffice.js --remote --file "cache/boxoffice-$(date +%Y-%m-%d).json"
          echo "票房數據導入完成"
