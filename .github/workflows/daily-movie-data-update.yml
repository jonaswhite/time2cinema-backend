name: Daily Movie Data Update

on:
  schedule:
    # 每天台灣時間上午 4:30 執行 (UTC+8)，對應 UTC 時間 20:30
    - cron: '30 20 * * *'
  # 允許手動觸發工作流程
  workflow_dispatch:

# 設置環境變數
env:
  PYTHONUNBUFFERED: 1  # 確保 Python 輸出即時顯示

jobs:
  update-movie-data:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    # 設置工作超時為 30 分鐘
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          cd backend/scripts/scrapers
          pip install requests beautifulsoup4 pandas lxml aiohttp asyncio psycopg2-binary

      - name: Create necessary directories
        run: |
          mkdir -p backend/output/scrapers
          mkdir -p backend/output/cache

      # 設置時區為台灣時間 (UTC+8)
      - name: Set timezone
        run: |
          sudo timedatectl set-timezone Asia/Taipei
          echo "當前時間: $(date)"

      # 設置 Node.js 環境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 執行 ATMovies 電影爬蟲
      - name: Run ATMovies movie scraper
        timeout-minutes: 15  # 設置爬蟲超時時間
        env:
          # DATABASE_URL is inherited from job-level env
          PGSSLMODE: require
          NODE_TLS_REJECT_UNAUTHORIZED: '0'  # 僅用於測試，生產環境應使用正確的 CA 證書
        run: |
          # 設置錯誤處理
          set -euo pipefail
          
          # 定義清理函數
          cleanup() {
            local exit_code=$?
            echo "正在清理資源..."
            # 殺死所有可能殘留的 Python 進程
            pkill -f "python.*atmovies_movie_scraper_v2.py" || true
            # 返回原始退出碼
            exit $exit_code
          }
          
          # 註冊清理函數
          trap cleanup EXIT
          
          echo "當前目錄: $(pwd)"
          echo "Python 版本: $(python --version)"
          echo "pip 版本: $(pip --version)"
          echo "PGSSLMODE: $PGSSLMODE"
          
          # 安裝必要的 Python 套件
          echo "安裝必要的 Python 套件..."
          pip install --no-cache-dir requests beautifulsoup4 pandas lxml aiohttp asyncio psycopg2-binary
          
          # 創建輸出目錄
          echo "創建輸出目錄..."
          mkdir -p backend/output/scrapers
          
          echo "開始執行爬蟲..."
          cd backend/scripts/scrapers
          
          # 使用 timeout 命令運行爬蟲，最多運行 10 分鐘
          echo "執行爬蟲腳本 (最多運行 10 分鐘)..."
          timeout 10m python -u atmovies_movie_scraper_v2.py || {
            # 檢查是否是超時導致的退出
            if [ $? -eq 124 ]; then
              echo "::warning::爬蟲執行超時，強制終止"
            else
              echo "::error::爬蟲執行失敗"
              exit 1
            fi
          }
          
          echo "爬蟲執行完成，檢查輸出檔案..."
          ls -la  # 顯示當前目錄內容
          
          # 檢查是否有生成 JSON 檔案
          JSON_FILES=$(find . -name "atmovies_movies_*.json" -type f -mmin -15)
          if [ -z "$JSON_FILES" ]; then
            echo "::error::未找到新生成的 JSON 檔案"
            # 嘗試使用更寬鬆的時間範圍查找
            JSON_FILES=$(find . -name "atmovies_movies_*.json" -type f | sort -r | head -1)
            if [ -n "$JSON_FILES" ]; then
              echo "找到較舊的 JSON 檔案: $JSON_FILES"
              echo "使用找到的檔案繼續..."
            else
              exit 1
            fi
          else
            echo "找到 JSON 檔案: $JSON_FILES"
          fi
          
          cd ../../..  # 返回工作區根目錄

      # 設置環境變數
      - name: Set up environment
        id: env
        run: |
          # 查找最新的電影JSON文件
          echo "正在查找最新的電影JSON文件..."
          echo "當前目錄: $(pwd)"
          echo "目錄內容:"
          ls -la backend/output/scrapers/ || echo "無法列出目錄內容"
          
          # 查找最近 15 分鐘內修改的 JSON 文件
          LATEST_JSON=$(find backend/output/scrapers -name "atmovies_movies_*.json" -type f -mmin -15 -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" " || true)
          
          if [ -n "$LATEST_JSON" ] && [ -f "$LATEST_JSON" ]; then
            echo "找到電影文件: $LATEST_JSON"
            echo "文件大小: $(du -h "$LATEST_JSON" | cut -f1)"
            echo "文件修改時間: $(date -r "$LATEST_JSON")"
            echo "LATEST_JSON=$LATEST_JSON" >> $GITHUB_ENV
            
            # 顯示文件前幾行以確認內容
            echo "文件前 5 行內容:"
            head -n 5 "$LATEST_JSON" || echo "無法讀取文件內容"
          else
            echo "::error::未找到有效的電影文件"
            echo "當前目錄下的 JSON 文件:"
            find backend/output/scrapers -name "*.json" -type f -ls || echo "找不到任何 JSON 文件"
            exit 1
          fi

      # 安裝 Node.js 依賴
      - name: Install Node.js dependencies
        if: steps.env.outcome == 'success'
        run: |
          echo "正在安裝 Node.js 依賴..."
          cd backend
          echo "Installing production dependencies..."
          npm install --omit=dev
          echo "Installing development dependencies for TypeScript..."
          npm install --save-dev @types/express @types/fs-extra @types/pg @types/node
          echo "Building TypeScript projects..."
          npm run build

      # 設置資料庫環境變數
      - name: Set up database environment
        id: db_env
        if: steps.env.outcome == 'success'
        run: |
          # 檢查 DATABASE_URL 是否存在
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "::error::secrets.DATABASE_URL 未設置! Workflow 將無法連接到資料庫。"
            exit 1
          else
            echo "使用 secrets 中的 DATABASE_URL"
            # DATABASE_URL is already set at job level, this step now primarily ensures it was set.
            echo "DATABASE_URL 已從 secrets 中獲取並在作業層級設定。"
          fi
          
          # 設置 LATEST_JSON 環境變數
          echo "LATEST_JSON=${{ env.LATEST_JSON }}" >> $GITHUB_ENV
          
          # 設置 TMDB_API_KEY 環境變數
          if [ -z "${{ secrets.TMDB_API_KEY }}" ]; then
            echo "::warning::secrets.TMDB_API_KEY 未設置，使用預設值"
            # 使用預設的 TMDB API Key (僅供測試使用)
            echo "TMDB_API_KEY=d4c9092656c3aa3cfa5761fbf093f7d0" >> $GITHUB_ENV
            echo "TMDB_API_KEY 已設置，使用預設值"
          else
            echo "TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}" >> $GITHUB_ENV
            echo "TMDB_API_KEY 已設置，使用 secrets 中的值"
          fi
          
      # 測試資料庫連接
      - name: Test database connection
        if: steps.db_env.outcome == 'success'
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          echo "測試資料庫連接..."
          if ! command -v psql &> /dev/null; then
            echo "安裝 postgresql-client..."
            sudo apt-get update && sudo apt-get install -y postgresql-client
          fi
          
          # 從 DATABASE_URL 中提取主機名
          DB_HOST=$(echo $DATABASE_URL | grep -oP 'postgresql://[^:]+:[^@]+@\K[^/]+')
          echo "嘗試連接到資料庫主機: $DB_HOST"
          
          # 測試連接
          if ! pg_isready -h $DB_HOST -p 5432; then
            echo "::error::無法連接到資料庫主機"
            exit 1
          fi
          echo "資料庫連接測試通過"
          
      # 執行資料庫匯入
      - name: Import movie data to database
        if: steps.db_env.outcome == 'success'
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          set -e  # 如果任何命令失敗，則退出
          
          echo "當前工作目錄: $(pwd)"
          echo "工作區內容:"
          ls -la
          
          echo "使用電影文件進行匯入: ${{ env.LATEST_JSON }}"
          echo "DATABASE_URL 長度: ${#DATABASE_URL}"
          
          # 確保 backend 目錄存在
          if [ ! -d "backend" ]; then
            echo "::error::找不到 backend 目錄"
            ls -la
            exit 1
          fi
          
          cd backend
          
          # 將 DATABASE_URL 寫入 .env 文件
          echo "DATABASE_URL=$DATABASE_URL" > .env
          echo "已創建 .env 文件，內容長度: $(wc -c < .env)"
          
          # 執行腳本並捕獲輸出
          echo "開始執行匯入腳本..."
          if ! node scripts/importers/import_movies_from_json.js -f "../${{ env.LATEST_JSON }}"; then
            echo "::error::電影資料匯入失敗"
            # 顯示 .env 文件內容（隱藏敏感信息）
            if [ -f ".env" ]; then
              echo "檢查 .env 文件內容（前10個字元）: $(head -c 10 .env)..."
              rm -f .env
            fi
            exit 1
          fi
          
          echo "電影資料已成功匯入資料庫"
          # 刪除臨時 .env 文件
          if [ -f ".env" ]; then
            rm -f .env
          fi
          
      - name: Update missing TMDB data
        if: steps.db_env.outcome == 'success' # 確保之前的步驟成功
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          TMDB_API_KEY: ${{ env.TMDB_API_KEY }}
        run: |
          echo "Updating missing TMDB data for movies..."
          cd backend
          node dist/db/updateMissingMovieData.js

      # 記錄執行結果
      - name: Create log file
        if: always()  # 即使之前的步驟失敗也執行
        run: |
          echo "Movie data update completed at $(date)" > movie_update_log.txt
          echo "Movie files:" >> movie_update_log.txt
          find backend/scripts/scrapers -name "atmovies_movies_*.csv" -type f -printf "%T@ %p\n" | sort -n >> movie_update_log.txt 2>/dev/null || echo "No movie files found" >> movie_update_log.txt
          
          # 上傳日誌文件作為構建產物
          echo "Uploading log file..."
          mkdir -p logs
          cp movie_update_log.txt logs/
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
      
      # 上傳日誌文件作為構建產物
      - name: Upload log file
        if: always()  # 即使之前的步驟失敗也執行
        uses: actions/upload-artifact@v4
        with:
          name: movie-update-logs
          path: logs/
          retention-days: 7
          
      # 提交更新的資料文件
      - name: Commit and push updated data files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git fetch
          git checkout main
          git add backend/scripts/scrapers/atmovies_movies_*.csv movie_update_log.txt || true
          git diff --quiet && git diff --staged --quiet || git commit -m "Auto update movie data $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin main
        continue-on-error: true
